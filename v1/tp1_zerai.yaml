swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "TP Architecture mobile ZERAI Idriss"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "contact"
  description: "Everything about your contacts"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"

- name: "profile"
  description: "Operations about profiles"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /contact:
    # Généralement une liste est au pluriel donc /contacts
    post:
      tags:
      - "contact"
      summary: "Add a new contact case"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Contact case"
        required: true
        schema:
          $ref: "#/definitions/ContactCase"
      responses:
        # 405 cela signifie que la méthode utilisée HTTP n'est pas la bonne, ici on est plus sur une 400
        "405":
          description: "Invalid input"
    put:
      # Ce n'est pas cohérent avec le fait que tu fais un DELETE sur /contact/{contactId} 
      tags:
      - "contact"
      summary: "Update an existing contact case"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Contact case that needs to be registred"
        required: true
        schema:
          $ref: "#/definitions/ContactCase"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Contact not found"
        "405":
          description: "Validation exception"
    get:
      tags:
      - "contact"
      summary: "Lists Contact cases of the currently authentificated profile"
      description: "Multiple con values can be provided with comma separated strings"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      # manque les paramètres pour la pagination
      - name: "profileid"
        in: "query"
        description: "Provide profile id to get a list of contact cases"
        required: true
        type: "integer"
        items:
          default: "1"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ContactCase"
        "400":
          description: "Invalid profileId value"
  /contact/{contactId}:
    delete:
      tags:
      - "contact"
      summary: "Deletes a Contact Case"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "contactId"
        in: "path"
        description: "contact id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Contact not found"
  /profile:
    post:
      tags:
      - "profile"
      summary: "Create profile"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Profile"
      responses:
        # Il faut détailler les codes retour
        default:
          description: "successful operation"
    put:
      tags:
      - "profile"
      summary: "Update profile"
      description: "This can only be done by the logged in user."
      operationId: "updateProfile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Updated profile object"
        required: true
        schema:
          $ref: "#/definitions/Profile"
      responses:
        # Et si tout est ok ?
        "400":
          description: "Invalid profile supplied"
        "404":
          description: "profile not found"
  /profile/login:
    get:
      tags:
      - "profile"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /profile/logout:
    get:
      tags:
      - "profile"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /profile/{profileId}:
    get:
      tags:
      - "profile"
      summary: "Returns a profile"
      description: ""
      operationId: "getprofile"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "profileId"
        in: "path"
        description: "profile id to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Profile not found"
definitions:
  Profile:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      adress:
        type: "string"
      covidStatus:
        type: "string"
        description: "Covid Status"
    xml:
      name: "Profile"
  ContactCase:
    type: "object"
    properties:
      id_contactCase:
        type: "integer"
        format: "int64"
      id_profile_sick:
        type: "integer"
        format: "int64"
      date:
        type: "string"
      place:
        type: "string"
      type:
        type: "string"
      email:
        type: "string"
      firstname:
        type: "string"
      lastname:
        type: "string"
      mail:
        type: "string"
    xml:
      name: "ContactCase"
  CovidCase:
    type: "object"
    properties:
      id_covidCase:
        type: "integer"
        format: "int64"
      id_profile_sick:
        type: "integer"
        format: "int64"
      date:
        type: "string"
    xml:
      name: "ContactCase"
