swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
- name: "administrateur"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  
          
  /user/contact/:
    get:
      tags:
      - "contact"
      summary: "Get contactlist of user"
      description: ""
      operationId: "getcontactlistofuser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"  #Requierement fait dans defintions
        name: "body"
        description: "get contact object"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Contact"
          
  /user/contact/{username}:
    put:
      tags:
      - "contact"
      summary: "Updated Contact"
      description: "This can only be done by the logged in user."
      operationId: "updatecontact"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"   #Requierement fait dans defintions
        name: "body"
        description: "Updated user object"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found" 
  
    delete:
      tags:
      - "contact"
      summary: "Delete Contact"
      description: "This can only be done by the logged in user."
      operationId: "deleteecontact"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
      
    post:
      tags:
      - "contact"
      summary: "Post Contact"
      description: "This can only be done by the logged in user."
      operationId: "createcontact"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"   #Requierement fait dans defintions
        name: "body"
        description: "deleted user object"
        schema:
          $ref: "#/definitions/Contact"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
          
          
      
  
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "Create an user"
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"  #Requierement fait dans defintions
        name: "body"
        description: "Created user object"
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
    
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      
      - in: "body"   #Requierement fait dans defintions
        name: "body"
        description: "Updated user object"
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  
  
  /user/email/{email}:
    get:
      tags:
      - "contact"
      summary: "Get user by user email"
      description: ""
      operationId: "getUserByEmail"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
          
  /user/username/{username}:
    get:
      tags:
      - "contact"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    
    
    
    
#    delete:
#      tags:
#      - "user"
##      summary: "Delete user"
#      description: "This can only be done by the logged in user."
#      operationId: "deleteUser"
#      produces:
#      - "application/xml"
#      - "application/json"
#      parameters:
#      - name: "username"
#        in: "path"
#        description: "The name that needs to be deleted"
#        required: true
#        type: "string"
#      responses:
#        "400":
#          description: "Invalid username supplied"
#        "404":
#          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  

  User:
    type: "object"
    required : 
      - lastName  #IS REQUIRED
      - email     #IS REQUIRED
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
        format: email
      age:
        type: "string"
      adress:
        type: "string"
    xml:
      name: "User"

  
  
  
  
  Contact : 
    type: "object"
    required :
      - "date"
      - "Hour"
      - "place"
      - "contactType"
    properties :
      date :
        type: "string"
        format : "date"
      Hour :
        type : "string"
        format: "date-time"
      place :
        type: "string"
      contactType :
        type: "boolean"
      User : 
        type  : "array"
        items:
          type: object
          properties:
            firstName:
              type: "string"
            lastName : 
              type: "string"
            email: 
              type: "string"
              format: email
        
      
        
  
  

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"